generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id
  email          String    @unique
  hashedPassword String
  sessions       Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Customer {
  id        String     @id
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  locations Location[]
}

model Location {
  id         String    @id
  address    String
  customerId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  devices    Device[]
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Group      Group[]
}

model Group {
  id   String @id
  name String

  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  devices Device[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  rules       Rule[]
  DeviceRules DeviceRules[]
}

enum DeviceType {
  Controller
  NVR
  CCTV_Camera
  Detector
}

model Device {
  id           String     @id
  name         String
  mac          String     @unique
  ip           String
  pin          Int
  serialNumber String     @unique
  deviceType   DeviceType
  groupId      String?
  locationId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  location     Location?  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  group        Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  rules DeviceRules[]
}

enum RuleType {
  AND
  OR
}

model Rule {
  id      String        @id
  name    String
  groupId String
  group   Group         @relation(fields: [groupId], references: [id])
  devices DeviceRules[]
}

model DeviceRules {
  device   Device  @relation(fields: [deviceId], references: [id])
  deviceId String
  rule     Rule    @relation(fields: [ruleId], references: [id])
  ruleId   String
  Group    Group?  @relation(fields: [groupId], references: [id])
  groupId  String?

  @@id([deviceId, ruleId])
}
