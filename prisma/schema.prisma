// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Customer {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  locations Location[]

  @@map("customer")
}

model Location {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  Device     Device[]

  @@unique([name, customerId])
  @@map("location")
}

model DeviceType {
  id           String  @id
  name         String
  allowInRules Boolean @default(false)

  devices Device[]

  @@map("device_type")
}

model Device {
  id           String    @id @default(cuid())
  name         String
  mac          String    @unique
  ip           String
  tailscaleIp  String?
  serialNumber String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String?

  deviceType   DeviceType @relation(fields: [deviceTypeId], references: [id], onDelete: Restrict)
  deviceTypeId String

  controller   Device?  @relation("ControllerDevices", fields: [controllerId], references: [id], onDelete: Cascade)
  controllerId String?
  devices      Device[] @relation("ControllerDevices")

  @@map("device")
}
